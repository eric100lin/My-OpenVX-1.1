/*
 * Copyright (c) 2016 The Khronos Group Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and/or associated documentation files (the
 * "Materials"), to deal in the Materials without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Materials, and to
 * permit persons to whom the Materials are furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Materials.
 *
 * THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 */

#ifndef _VX_DISPATCH_H_
#define _VX_DISPATCH_H_

#include <VX/vx_khr_icd.h>
#include <VX/vx_compatibility.h>

typedef vx_context VX_API_CALL TYPE_vxCreateContextFromPlatform(vx_platform platform);
typedef vx_context VX_API_CALL TYPE_vxCreateContext();
typedef vx_status VX_API_CALL TYPE_vxReleaseContext(vx_context *context);
typedef vx_context VX_API_CALL TYPE_vxGetContext(vx_reference reference);
typedef vx_status VX_API_CALL TYPE_vxQueryContext(vx_context context, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxSetContextAttribute(vx_context context, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxHint(vx_reference reference, vx_enum hint, const void* data, vx_size data_size);
typedef vx_status VX_API_CALL TYPE_vxHint101(vx_reference reference, vx_enum hint);
typedef vx_status VX_API_CALL TYPE_vxDirective(vx_reference reference, vx_enum directive);
typedef vx_status VX_API_CALL TYPE_vxGetStatus(vx_reference reference);
typedef vx_enum VX_API_CALL TYPE_vxRegisterUserStruct(vx_context context, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxAllocateUserKernelId(vx_context context, vx_enum * pKernelEnumId);
typedef vx_status VX_API_CALL TYPE_vxAllocateUserKernelLibraryId(vx_context context, vx_enum * pLibraryId);
typedef vx_status VX_API_CALL TYPE_vxSetImmediateModeTarget(vx_context context, vx_enum target_enum, const char* target_string);
typedef vx_image VX_API_CALL TYPE_vxCreateImage(vx_context context, vx_uint32 width, vx_uint32 height, vx_df_image color);
typedef vx_image VX_API_CALL TYPE_vxCreateImageFromROI(vx_image img, const vx_rectangle_t *rect);
typedef vx_image VX_API_CALL TYPE_vxCreateUniformImage(vx_context context, vx_uint32 width, vx_uint32 height, vx_df_image color, const vx_pixel_value_t *value);
typedef vx_image VX_API_CALL TYPE_vxCreateVirtualImage(vx_graph graph, vx_uint32 width, vx_uint32 height, vx_df_image color);
typedef vx_image VX_API_CALL TYPE_vxCreateImageFromHandle(vx_context context, vx_df_image color, const vx_imagepatch_addressing_t addrs[], void *const ptrs[], vx_enum memory_type);
typedef vx_status VX_API_CALL TYPE_vxSwapImageHandle(vx_image image, void* const new_ptrs[], void* prev_ptrs[], vx_size num_planes);
typedef vx_status VX_API_CALL TYPE_vxQueryImage(vx_image image, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxSetImageAttribute(vx_image image, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReleaseImage(vx_image *image);
typedef vx_size VX_API_CALL TYPE_vxComputeImagePatchSize(vx_image image, const vx_rectangle_t *rect, vx_uint32 plane_index);
typedef vx_status VX_API_CALL TYPE_vxAccessImagePatch(vx_image image, const vx_rectangle_t *rect, vx_uint32 plane_index, vx_imagepatch_addressing_t *addr, void **ptr, vx_enum usage);
typedef vx_status VX_API_CALL TYPE_vxCommitImagePatch(vx_image image, const vx_rectangle_t *rect, vx_uint32 plane_index, const vx_imagepatch_addressing_t *addr, const void *ptr);
typedef vx_status VX_API_CALL TYPE_vxGetValidRegionImage(vx_image image, vx_rectangle_t *rect);
typedef vx_status VX_API_CALL TYPE_vxCopyImagePatch(vx_image image, const vx_rectangle_t *image_rect, vx_uint32 image_plane_index, const vx_imagepatch_addressing_t *user_addr, void * user_ptr, vx_enum usage, vx_enum user_mem_type);
typedef vx_status VX_API_CALL TYPE_vxMapImagePatch(vx_image image, const vx_rectangle_t *rect, vx_uint32 plane_index, vx_map_id *map_id, vx_imagepatch_addressing_t *addr, void **ptr, vx_enum usage, vx_enum mem_type, vx_uint32 flags);
typedef vx_status VX_API_CALL TYPE_vxUnmapImagePatch(vx_image image, vx_map_id map_id);
typedef vx_image VX_API_CALL TYPE_vxCreateImageFromChannel(vx_image img, vx_enum channel);
typedef vx_status VX_API_CALL TYPE_vxSetImageValidRectangle(vx_image image, const vx_rectangle_t *rect);
typedef vx_status VX_API_CALL TYPE_vxLoadKernels(vx_context context, const vx_char *module);
typedef vx_status VX_API_CALL TYPE_vxUnloadKernels(vx_context context, const vx_char *module);
typedef vx_kernel VX_API_CALL TYPE_vxGetKernelByName(vx_context context, const vx_char *name);
typedef vx_kernel VX_API_CALL TYPE_vxGetKernelByEnum(vx_context context, vx_enum kernel);
typedef vx_status VX_API_CALL TYPE_vxQueryKernel(vx_kernel kernel, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReleaseKernel(vx_kernel *kernel);
typedef vx_kernel VX_API_CALL TYPE_vxAddUserKernel(vx_context context, const vx_char name[VX_MAX_KERNEL_NAME], vx_enum enumeration, vx_kernel_f func_ptr, vx_uint32 numParams, vx_kernel_validate_f validate, vx_kernel_initialize_f init, vx_kernel_deinitialize_f deinit);
typedef vx_status VX_API_CALL TYPE_vxFinalizeKernel(vx_kernel kernel);
typedef vx_status VX_API_CALL TYPE_vxAddParameterToKernel(vx_kernel kernel, vx_uint32 index, vx_enum dir, vx_enum data_type, vx_enum state);
typedef vx_status VX_API_CALL TYPE_vxRemoveKernel(vx_kernel kernel);
typedef vx_status VX_API_CALL TYPE_vxSetKernelAttribute(vx_kernel kernel, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_parameter VX_API_CALL TYPE_vxGetKernelParameterByIndex(vx_kernel kernel, vx_uint32 index);
typedef vx_graph VX_API_CALL TYPE_vxCreateGraph(vx_context context);
typedef vx_status VX_API_CALL TYPE_vxReleaseGraph(vx_graph *graph);
typedef vx_status VX_API_CALL TYPE_vxVerifyGraph(vx_graph graph);
typedef vx_status VX_API_CALL TYPE_vxProcessGraph(vx_graph graph);
typedef vx_status VX_API_CALL TYPE_vxScheduleGraph(vx_graph graph);
typedef vx_status VX_API_CALL TYPE_vxWaitGraph(vx_graph graph);
typedef vx_status VX_API_CALL TYPE_vxQueryGraph(vx_graph graph, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxSetGraphAttribute(vx_graph graph, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxAddParameterToGraph(vx_graph graph, vx_parameter parameter);
typedef vx_status VX_API_CALL TYPE_vxSetGraphParameterByIndex(vx_graph graph, vx_uint32 index, vx_reference value);
typedef vx_parameter VX_API_CALL TYPE_vxGetGraphParameterByIndex(vx_graph graph, vx_uint32 index);
typedef vx_bool VX_API_CALL TYPE_vxIsGraphVerified(vx_graph graph);
typedef vx_node VX_API_CALL TYPE_vxCreateGenericNode(vx_graph graph, vx_kernel kernel);
typedef vx_status VX_API_CALL TYPE_vxQueryNode(vx_node node, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxSetNodeAttribute(vx_node node, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReleaseNode(vx_node *node);
typedef vx_status VX_API_CALL TYPE_vxRemoveNode(vx_node *node);
typedef vx_status VX_API_CALL TYPE_vxAssignNodeCallback(vx_node node, vx_nodecomplete_f callback);
typedef vx_nodecomplete_f VX_API_CALL TYPE_vxRetrieveNodeCallback(vx_node node);
typedef vx_status VX_API_CALL TYPE_vxSetNodeTarget(vx_node node, vx_enum target_enum, const char* target_string);
typedef vx_status VX_API_CALL TYPE_vxReplicateNode(vx_graph graph, vx_node first_node, vx_bool replicate[], vx_uint32 number_of_parameters);
typedef vx_parameter VX_API_CALL TYPE_vxGetParameterByIndex(vx_node node, vx_uint32 index);
typedef vx_status VX_API_CALL TYPE_vxReleaseParameter(vx_parameter *param);
typedef vx_status VX_API_CALL TYPE_vxSetParameterByIndex(vx_node node, vx_uint32 index, vx_reference value);
typedef vx_status VX_API_CALL TYPE_vxSetParameterByReference(vx_parameter parameter, vx_reference value);
typedef vx_status VX_API_CALL TYPE_vxQueryParameter(vx_parameter param, vx_enum attribute, void *ptr, vx_size size);
typedef vx_scalar VX_API_CALL TYPE_vxCreateScalar(vx_context context, vx_enum data_type, const void *ptr);
typedef vx_status VX_API_CALL TYPE_vxReleaseScalar(vx_scalar *scalar);
typedef vx_status VX_API_CALL TYPE_vxQueryScalar(vx_scalar scalar, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReadScalarValue(vx_scalar ref, void *ptr);
typedef vx_status VX_API_CALL TYPE_vxWriteScalarValue(vx_scalar ref, const void *ptr);
typedef vx_status VX_API_CALL TYPE_vxCopyScalar(vx_scalar scalar, void *user_ptr, vx_enum usage, vx_enum user_mem_type);
typedef vx_status VX_API_CALL TYPE_vxQueryReference(vx_reference ref, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReleaseReference(vx_reference* ref_ptr);
typedef vx_status VX_API_CALL TYPE_vxRetainReference(vx_reference ref);
typedef vx_status VX_API_CALL TYPE_vxSetReferenceName(vx_reference ref, const vx_char *name);
typedef vx_status VX_API_CALL TYPE_vxQueryDelay(vx_delay delay, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReleaseDelay(vx_delay *delay);
typedef vx_delay VX_API_CALL TYPE_vxCreateDelay(vx_context context, vx_reference exemplar, vx_size slots);
typedef vx_reference VX_API_CALL TYPE_vxGetReferenceFromDelay(vx_delay delay, vx_int32 index);
typedef vx_status VX_API_CALL TYPE_vxAgeDelay(vx_delay delay);
typedef vx_status VX_API_CALL TYPE_vxRegisterAutoAging(vx_graph graph, vx_delay delay);
typedef void VX_API_CALL TYPE_vxAddLogEntry(vx_reference ref, vx_status status, const char *message, ...);
typedef void VX_API_CALL TYPE_vxRegisterLogCallback(vx_context context, vx_log_callback_f callback, vx_bool reentrant);
typedef vx_lut VX_API_CALL TYPE_vxCreateLUT(vx_context context, vx_enum data_type, vx_size count);
typedef vx_status VX_API_CALL TYPE_vxReleaseLUT(vx_lut *lut);
typedef vx_status VX_API_CALL TYPE_vxQueryLUT(vx_lut lut, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxAccessLUT(vx_lut lut, void **ptr, vx_enum usage);
typedef vx_status VX_API_CALL TYPE_vxCommitLUT(vx_lut lut, const void *ptr);
typedef vx_status VX_API_CALL TYPE_vxCopyLUT(vx_lut lut, void *user_ptr, vx_enum usage, vx_enum user_mem_type);
typedef vx_status VX_API_CALL TYPE_vxMapLUT(vx_lut lut, vx_map_id *map_id, void **ptr, vx_enum usage, vx_enum mem_type, vx_bitfield flags);
typedef vx_status VX_API_CALL TYPE_vxUnmapLUT(vx_lut lut, vx_map_id map_id);
typedef vx_distribution VX_API_CALL TYPE_vxCreateDistribution(vx_context context, vx_size numBins, vx_int32 offset, vx_uint32 range);
typedef vx_status VX_API_CALL TYPE_vxReleaseDistribution(vx_distribution *distribution);
typedef vx_status VX_API_CALL TYPE_vxQueryDistribution(vx_distribution distribution, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxAccessDistribution(vx_distribution distribution, void **ptr, vx_enum usage);
typedef vx_status VX_API_CALL TYPE_vxCommitDistribution(vx_distribution distribution, const void * ptr);
typedef vx_status VX_API_CALL TYPE_vxCopyDistribution(vx_distribution distribution, void *user_ptr, vx_enum usage, vx_enum user_mem_type);
typedef vx_status VX_API_CALL TYPE_vxMapDistribution(vx_distribution distribution, vx_map_id *map_id, void **ptr, vx_enum usage, vx_enum mem_type, vx_bitfield flags);
typedef vx_status VX_API_CALL TYPE_vxUnmapDistribution(vx_distribution distribution, vx_map_id map_id);
typedef vx_threshold VX_API_CALL TYPE_vxCreateThreshold(vx_context c, vx_enum thresh_type, vx_enum data_type);
typedef vx_status VX_API_CALL TYPE_vxReleaseThreshold(vx_threshold *thresh);
typedef vx_status VX_API_CALL TYPE_vxSetThresholdAttribute(vx_threshold thresh, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxQueryThreshold(vx_threshold thresh, vx_enum attribute, void *ptr, vx_size size);
typedef vx_matrix VX_API_CALL TYPE_vxCreateMatrix(vx_context c, vx_enum data_type, vx_size columns, vx_size rows);
typedef vx_status VX_API_CALL TYPE_vxReleaseMatrix(vx_matrix *mat);
typedef vx_status VX_API_CALL TYPE_vxQueryMatrix(vx_matrix mat, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReadMatrix(vx_matrix mat, void *array);
typedef vx_status VX_API_CALL TYPE_vxWriteMatrix(vx_matrix mat, const void *array);
typedef vx_status VX_API_CALL TYPE_vxCopyMatrix(vx_matrix matrix, void *user_ptr, vx_enum usage, vx_enum user_mem_type);
typedef vx_matrix VX_API_CALL TYPE_vxCreateMatrixFromPattern(vx_context context, vx_enum pattern, vx_size columns, vx_size rows);
typedef vx_convolution VX_API_CALL TYPE_vxCreateConvolution(vx_context context, vx_size columns, vx_size rows);
typedef vx_status VX_API_CALL TYPE_vxReleaseConvolution(vx_convolution *conv);
typedef vx_status VX_API_CALL TYPE_vxQueryConvolution(vx_convolution conv, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxSetConvolutionAttribute(vx_convolution conv, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxReadConvolutionCoefficients(vx_convolution conv, vx_int16 *array);
typedef vx_status VX_API_CALL TYPE_vxWriteConvolutionCoefficients(vx_convolution conv, const vx_int16 *array);
typedef vx_status VX_API_CALL TYPE_vxCopyConvolutionCoefficients(vx_convolution conv, void *user_ptr, vx_enum usage, vx_enum user_mem_type);
typedef vx_pyramid VX_API_CALL TYPE_vxCreatePyramid(vx_context context, vx_size levels, vx_float32 scale, vx_uint32 width, vx_uint32 height, vx_df_image format);
typedef vx_pyramid VX_API_CALL TYPE_vxCreateVirtualPyramid(vx_graph graph, vx_size levels, vx_float32 scale, vx_uint32 width, vx_uint32 height, vx_df_image format);
typedef vx_status VX_API_CALL TYPE_vxReleasePyramid(vx_pyramid *pyr);
typedef vx_status VX_API_CALL TYPE_vxQueryPyramid(vx_pyramid pyr, vx_enum attribute, void *ptr, vx_size size);
typedef vx_image VX_API_CALL TYPE_vxGetPyramidLevel(vx_pyramid pyr, vx_uint32 index);
typedef vx_remap VX_API_CALL TYPE_vxCreateRemap(vx_context context, vx_uint32 src_width, vx_uint32 src_height, vx_uint32 dst_width, vx_uint32 dst_height);
typedef vx_status VX_API_CALL TYPE_vxReleaseRemap(vx_remap *table);
typedef vx_status VX_API_CALL TYPE_vxSetRemapPoint(vx_remap table, vx_uint32 dst_x, vx_uint32 dst_y, vx_float32 src_x, vx_float32 src_y);
typedef vx_status VX_API_CALL TYPE_vxGetRemapPoint(vx_remap table, vx_uint32 dst_x, vx_uint32 dst_y, vx_float32 *src_x, vx_float32 *src_y);
typedef vx_status VX_API_CALL TYPE_vxQueryRemap(vx_remap r, vx_enum attribute, void *ptr, vx_size size);
typedef vx_array VX_API_CALL TYPE_vxCreateArray(vx_context context, vx_enum item_type, vx_size capacity);
typedef vx_array VX_API_CALL TYPE_vxCreateVirtualArray(vx_graph graph, vx_enum item_type, vx_size capacity);
typedef vx_status VX_API_CALL TYPE_vxReleaseArray(vx_array *arr);
typedef vx_status VX_API_CALL TYPE_vxQueryArray(vx_array arr, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxAddArrayItems(vx_array arr, vx_size count, const void *ptr, vx_size stride);
typedef vx_status VX_API_CALL TYPE_vxTruncateArray(vx_array arr, vx_size new_num_items);
typedef vx_status VX_API_CALL TYPE_vxAccessArrayRange(vx_array arr, vx_size start, vx_size end, vx_size *stride, void **ptr, vx_enum usage);
typedef vx_status VX_API_CALL TYPE_vxCommitArrayRange(vx_array arr, vx_size start, vx_size end, const void *ptr);
typedef vx_status VX_API_CALL TYPE_vxCopyArrayRange(vx_array array, vx_size range_start, vx_size range_end, vx_size user_stride, void *user_ptr, vx_enum usage, vx_enum user_mem_type);
typedef vx_status VX_API_CALL TYPE_vxMapArrayRange(vx_array array, vx_size range_start, vx_size range_end, vx_map_id *map_id, vx_size *stride, void **ptr, vx_enum usage, vx_enum mem_type, vx_uint32 flags);
typedef vx_status VX_API_CALL TYPE_vxUnmapArrayRange(vx_array array, vx_map_id map_id);
typedef vx_array VX_API_CALL TYPE_vxCreateObjectArray(vx_context context, vx_reference exemplar, vx_size count);
typedef vx_array VX_API_CALL TYPE_vxCreateVirtualObjectArray(vx_graph graph, vx_reference exemplar, vx_size count);
typedef vx_reference VX_API_CALL TYPE_vxGetObjectArrayItem(vx_object_array arr, vx_uint32 index);
typedef vx_status VX_API_CALL TYPE_vxReleaseObjectArray(vx_object_array *arr);
typedef vx_status VX_API_CALL TYPE_vxQueryObjectArray(vx_object_array arr, vx_enum attribute, void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxSetMetaFormatAttribute(vx_meta_format meta, vx_enum attribute, const void *ptr, vx_size size);
typedef vx_status VX_API_CALL TYPE_vxSetMetaFormatFromReference(vx_meta_format meta, vx_reference exemplar);
typedef vx_node VX_API_CALL TYPE_vxColorConvertNode(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxChannelExtractNode(vx_graph graph, vx_image input, vx_enum channel, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxChannelCombineNode(vx_graph graph, vx_image plane0, vx_image plane1, vx_image plane2, vx_image plane3, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxPhaseNode(vx_graph graph, vx_image grad_x, vx_image grad_y, vx_image orientation);
typedef vx_node VX_API_CALL TYPE_vxSobel3x3Node(vx_graph graph, vx_image input, vx_image output_x, vx_image output_y);
typedef vx_node VX_API_CALL TYPE_vxMagnitudeNode(vx_graph graph, vx_image grad_x, vx_image grad_y, vx_image mag);
typedef vx_node VX_API_CALL TYPE_vxScaleImageNode(vx_graph graph, vx_image src, vx_image dst, vx_enum type);
typedef vx_node VX_API_CALL TYPE_vxTableLookupNode(vx_graph graph, vx_image input, vx_lut lut, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxHistogramNode(vx_graph graph, vx_image input, vx_distribution distribution);
typedef vx_node VX_API_CALL TYPE_vxEqualizeHistNode(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxAbsDiffNode(vx_graph graph, vx_image in1, vx_image in2, vx_image out);
typedef vx_node VX_API_CALL TYPE_vxMeanStdDevNode(vx_graph graph, vx_image input, vx_scalar mean, vx_scalar stddev);
typedef vx_node VX_API_CALL TYPE_vxThresholdNode(vx_graph graph, vx_image input, vx_threshold thresh, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxIntegralImageNode(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxErode3x3Node(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxDilate3x3Node(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxMedian3x3Node(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxBox3x3Node(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxGaussian3x3Node(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxNonLinearFilterNode(vx_graph graph, vx_enum function, vx_image input, vx_matrix mask, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxConvolveNode(vx_graph graph, vx_image input, vx_convolution conv, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxGaussianPyramidNode(vx_graph graph, vx_image input, vx_pyramid gaussian);
typedef vx_node VX_API_CALL TYPE_vxLaplacianPyramidNode(vx_graph graph, vx_image input, vx_pyramid laplacian, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxLaplacianReconstructNode(vx_graph graph, vx_pyramid laplacian, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxAccumulateImageNode(vx_graph graph, vx_image input, vx_image accum);
typedef vx_node VX_API_CALL TYPE_vxAccumulateWeightedImageNode(vx_graph graph, vx_image input, vx_scalar alpha, vx_image accum);
typedef vx_node VX_API_CALL TYPE_vxAccumulateSquareImageNode(vx_graph graph, vx_image input, vx_scalar shift, vx_image accum);
typedef vx_node VX_API_CALL TYPE_vxMinMaxLocNode(vx_graph graph, vx_image input, vx_scalar minVal, vx_scalar maxVal, vx_array minLoc, vx_array maxLoc, vx_scalar minCount, vx_scalar maxCount);
typedef vx_node VX_API_CALL TYPE_vxAndNode(vx_graph graph, vx_image in1, vx_image in2, vx_image out);
typedef vx_node VX_API_CALL TYPE_vxOrNode(vx_graph graph, vx_image in1, vx_image in2, vx_image out);
typedef vx_node VX_API_CALL TYPE_vxXorNode(vx_graph graph, vx_image in1, vx_image in2, vx_image out);
typedef vx_node VX_API_CALL TYPE_vxNotNode(vx_graph graph, vx_image input, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxMultiplyNode(vx_graph graph, vx_image in1, vx_image in2, vx_scalar scale, vx_enum overflow_policy, vx_enum rounding_policy, vx_image out);
typedef vx_node VX_API_CALL TYPE_vxAddNode(vx_graph graph, vx_image in1, vx_image in2, vx_enum policy, vx_image out);
typedef vx_node VX_API_CALL TYPE_vxSubtractNode(vx_graph graph, vx_image in1, vx_image in2, vx_enum policy, vx_image out);
typedef vx_node VX_API_CALL TYPE_vxConvertDepthNode(vx_graph graph, vx_image input, vx_image output, vx_enum policy, vx_scalar shift);
typedef vx_node VX_API_CALL TYPE_vxCannyEdgeDetectorNode(vx_graph graph, vx_image input, vx_threshold hyst, vx_int32 gradient_size, vx_enum norm_type, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxWarpAffineNode(vx_graph graph, vx_image input, vx_matrix matrix, vx_enum type, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxWarpPerspectiveNode(vx_graph graph, vx_image input, vx_matrix matrix, vx_enum type, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxHarrisCornersNode(vx_graph graph, vx_image input, vx_scalar strength_thresh, vx_scalar min_distance, vx_scalar sensitivity, vx_int32 gradient_size, vx_int32 block_size, vx_array corners, vx_scalar num_corners);
typedef vx_node VX_API_CALL TYPE_vxFastCornersNode(vx_graph graph, vx_image input, vx_scalar strength_thresh, vx_bool nonmax_suppression, vx_array corners, vx_scalar num_corners);
typedef vx_node VX_API_CALL TYPE_vxOpticalFlowPyrLKNode(vx_graph graph, vx_pyramid old_images, vx_pyramid new_images, vx_array old_points, vx_array new_points_estimates, vx_array new_points, vx_enum termination, vx_scalar epsilon, vx_scalar num_iterations, vx_scalar use_initial_estimate, vx_size window_dimension);
typedef vx_node VX_API_CALL TYPE_vxRemapNode(vx_graph graph, vx_image input, vx_remap table, vx_enum policy, vx_image output);
typedef vx_node VX_API_CALL TYPE_vxHalfScaleGaussianNode(vx_graph graph, vx_image input, vx_image output, vx_int32 kernel_size);
typedef vx_status VX_API_CALL TYPE_vxuColorConvert(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuChannelExtract(vx_context context, vx_image input, vx_enum channel, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuChannelCombine(vx_context context, vx_image plane0, vx_image plane1, vx_image plane2, vx_image plane3, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuSobel3x3(vx_context context, vx_image input, vx_image output_x, vx_image output_y);
typedef vx_status VX_API_CALL TYPE_vxuMagnitude(vx_context context, vx_image grad_x, vx_image grad_y, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuPhase(vx_context context, vx_image grad_x, vx_image grad_y, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuScaleImage(vx_context context, vx_image src, vx_image dst, vx_enum type);
typedef vx_status VX_API_CALL TYPE_vxuTableLookup(vx_context context, vx_image input, vx_lut lut, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuHistogram(vx_context context, vx_image input, vx_distribution distribution);
typedef vx_status VX_API_CALL TYPE_vxuEqualizeHist(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuAbsDiff(vx_context context, vx_image in1, vx_image in2, vx_image out);
typedef vx_status VX_API_CALL TYPE_vxuMeanStdDev(vx_context context, vx_image input, vx_float32 *mean, vx_float32 *stddev);
typedef vx_status VX_API_CALL TYPE_vxuThreshold(vx_context context, vx_image input, vx_threshold thresh, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuIntegralImage(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuErode3x3(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuDilate3x3(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuMedian3x3(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuBox3x3(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuGaussian3x3(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuNonLinearFilter(vx_context context, vx_enum function, vx_image input, vx_matrix mask, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuConvolve(vx_context context, vx_image input, vx_convolution conv, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuGaussianPyramid(vx_context context, vx_image input, vx_pyramid gaussian);
typedef vx_status VX_API_CALL TYPE_vxuLaplacianPyramid(vx_context context, vx_image input, vx_pyramid laplacian, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuLaplacianReconstruct(vx_context context, vx_pyramid laplacian, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuAccumulateImage(vx_context context, vx_image input, vx_image accum);
typedef vx_status VX_API_CALL TYPE_vxuAccumulateWeightedImage(vx_context context, vx_image input, vx_scalar scale, vx_image accum);
typedef vx_status VX_API_CALL TYPE_vxuAccumulateSquareImage(vx_context context, vx_image input, vx_scalar shift, vx_image accum);
typedef vx_status VX_API_CALL TYPE_vxuMinMaxLoc(vx_context context, vx_image input, vx_scalar minVal, vx_scalar maxVal, vx_array minLoc, vx_array maxLoc, vx_scalar minCount, vx_scalar maxCount);
typedef vx_status VX_API_CALL TYPE_vxuConvertDepth(vx_context context, vx_image input, vx_image output, vx_enum policy, vx_scalar shift);
typedef vx_status VX_API_CALL TYPE_vxuCannyEdgeDetector(vx_context context, vx_image input, vx_threshold hyst, vx_int32 gradient_size, vx_enum norm_type, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuHalfScaleGaussian(vx_context context, vx_image input, vx_image output, vx_int32 kernel_size);
typedef vx_status VX_API_CALL TYPE_vxuAnd(vx_context context, vx_image in1, vx_image in2, vx_image out);
typedef vx_status VX_API_CALL TYPE_vxuOr(vx_context context, vx_image in1, vx_image in2, vx_image out);
typedef vx_status VX_API_CALL TYPE_vxuXor(vx_context context, vx_image in1, vx_image in2, vx_image out);
typedef vx_status VX_API_CALL TYPE_vxuNot(vx_context context, vx_image input, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuMultiply(vx_context context, vx_image in1, vx_image in2, vx_scalar scale, vx_enum overflow_policy, vx_enum rounding_policy, vx_image out);
typedef vx_status VX_API_CALL TYPE_vxuAdd(vx_context context, vx_image in1, vx_image in2, vx_enum policy, vx_image out);
typedef vx_status VX_API_CALL TYPE_vxuSubtract(vx_context context, vx_image in1, vx_image in2, vx_enum policy, vx_image out);
typedef vx_status VX_API_CALL TYPE_vxuWarpAffine(vx_context context, vx_image input, vx_matrix matrix, vx_enum type, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuWarpPerspective(vx_context context, vx_image input, vx_matrix matrix, vx_enum type, vx_image output);
typedef vx_status VX_API_CALL TYPE_vxuHarrisCorners(vx_context context, vx_image input, vx_scalar strength_thresh, vx_scalar min_distance, vx_scalar sensitivity, vx_int32 gradient_size, vx_int32 block_size, vx_array corners, vx_scalar num_corners);
typedef vx_status VX_API_CALL TYPE_vxuFastCorners(vx_context context, vx_image input, vx_scalar strength_thresh, vx_bool nonmax_suppression, vx_array corners, vx_scalar num_corners);
typedef vx_status VX_API_CALL TYPE_vxuOpticalFlowPyrLK(vx_context context, vx_pyramid old_images, vx_pyramid new_images, vx_array old_points, vx_array new_points_estimates, vx_array new_points, vx_enum termination, vx_scalar epsilon, vx_scalar num_iterations, vx_scalar use_initial_estimate, vx_size window_dimension);
typedef vx_status VX_API_CALL TYPE_vxuRemap(vx_context context, vx_image input, vx_remap table, vx_enum policy, vx_image output);
typedef vx_kernel VX_API_CALL TYPE_vxAddKernel(vx_context context, const vx_char name[VX_MAX_KERNEL_NAME], vx_enum enumeration, vx_kernel_f func_ptr, vx_uint32 numParams, vx_kernel_input_validate_f input, vx_kernel_output_validate_f output, vx_kernel_initialize_f init, vx_kernel_deinitialize_f deinit);

struct _vx_platform {
    vx_platform   next;
    vx_char     * path_openvx;
    vx_char     * path_vxu;
    vx_bool       attributes_valid;
    vx_uint16     vendor_id;
    vx_uint16     version;
    vx_size       extensions_size;
    vx_char     * extensions;
    void        * handle_openvx;
    void        * handle_vxu;
    TYPE_vxCreateContextFromPlatform * vxCreateContextFromPlatform;
    TYPE_vxCreateContext * vxCreateContext;
    TYPE_vxReleaseContext * vxReleaseContext;
    TYPE_vxGetContext * vxGetContext;
    TYPE_vxQueryContext * vxQueryContext;
    TYPE_vxSetContextAttribute * vxSetContextAttribute;
    TYPE_vxHint * vxHint;
    TYPE_vxHint101 * vxHint101;
    TYPE_vxDirective * vxDirective;
    TYPE_vxGetStatus * vxGetStatus;
    TYPE_vxRegisterUserStruct * vxRegisterUserStruct;
    TYPE_vxAllocateUserKernelId * vxAllocateUserKernelId;
    TYPE_vxAllocateUserKernelLibraryId * vxAllocateUserKernelLibraryId;
    TYPE_vxSetImmediateModeTarget * vxSetImmediateModeTarget;
    TYPE_vxCreateImage * vxCreateImage;
    TYPE_vxCreateImageFromROI * vxCreateImageFromROI;
    TYPE_vxCreateUniformImage * vxCreateUniformImage;
    TYPE_vxCreateVirtualImage * vxCreateVirtualImage;
    TYPE_vxCreateImageFromHandle * vxCreateImageFromHandle;
    TYPE_vxSwapImageHandle * vxSwapImageHandle;
    TYPE_vxQueryImage * vxQueryImage;
    TYPE_vxSetImageAttribute * vxSetImageAttribute;
    TYPE_vxReleaseImage * vxReleaseImage;
    TYPE_vxComputeImagePatchSize * vxComputeImagePatchSize;
    TYPE_vxAccessImagePatch * vxAccessImagePatch;
    TYPE_vxCommitImagePatch * vxCommitImagePatch;
    TYPE_vxGetValidRegionImage * vxGetValidRegionImage;
    TYPE_vxCopyImagePatch * vxCopyImagePatch;
    TYPE_vxMapImagePatch * vxMapImagePatch;
    TYPE_vxUnmapImagePatch * vxUnmapImagePatch;
    TYPE_vxCreateImageFromChannel * vxCreateImageFromChannel;
    TYPE_vxSetImageValidRectangle * vxSetImageValidRectangle;
    TYPE_vxLoadKernels * vxLoadKernels;
    TYPE_vxUnloadKernels * vxUnloadKernels;
    TYPE_vxGetKernelByName * vxGetKernelByName;
    TYPE_vxGetKernelByEnum * vxGetKernelByEnum;
    TYPE_vxQueryKernel * vxQueryKernel;
    TYPE_vxReleaseKernel * vxReleaseKernel;
    TYPE_vxAddUserKernel * vxAddUserKernel;
    TYPE_vxFinalizeKernel * vxFinalizeKernel;
    TYPE_vxAddParameterToKernel * vxAddParameterToKernel;
    TYPE_vxRemoveKernel * vxRemoveKernel;
    TYPE_vxSetKernelAttribute * vxSetKernelAttribute;
    TYPE_vxGetKernelParameterByIndex * vxGetKernelParameterByIndex;
    TYPE_vxCreateGraph * vxCreateGraph;
    TYPE_vxReleaseGraph * vxReleaseGraph;
    TYPE_vxVerifyGraph * vxVerifyGraph;
    TYPE_vxProcessGraph * vxProcessGraph;
    TYPE_vxScheduleGraph * vxScheduleGraph;
    TYPE_vxWaitGraph * vxWaitGraph;
    TYPE_vxQueryGraph * vxQueryGraph;
    TYPE_vxSetGraphAttribute * vxSetGraphAttribute;
    TYPE_vxAddParameterToGraph * vxAddParameterToGraph;
    TYPE_vxSetGraphParameterByIndex * vxSetGraphParameterByIndex;
    TYPE_vxGetGraphParameterByIndex * vxGetGraphParameterByIndex;
    TYPE_vxIsGraphVerified * vxIsGraphVerified;
    TYPE_vxCreateGenericNode * vxCreateGenericNode;
    TYPE_vxQueryNode * vxQueryNode;
    TYPE_vxSetNodeAttribute * vxSetNodeAttribute;
    TYPE_vxReleaseNode * vxReleaseNode;
    TYPE_vxRemoveNode * vxRemoveNode;
    TYPE_vxAssignNodeCallback * vxAssignNodeCallback;
    TYPE_vxRetrieveNodeCallback * vxRetrieveNodeCallback;
    TYPE_vxSetNodeTarget * vxSetNodeTarget;
    TYPE_vxReplicateNode * vxReplicateNode;
    TYPE_vxGetParameterByIndex * vxGetParameterByIndex;
    TYPE_vxReleaseParameter * vxReleaseParameter;
    TYPE_vxSetParameterByIndex * vxSetParameterByIndex;
    TYPE_vxSetParameterByReference * vxSetParameterByReference;
    TYPE_vxQueryParameter * vxQueryParameter;
    TYPE_vxCreateScalar * vxCreateScalar;
    TYPE_vxReleaseScalar * vxReleaseScalar;
    TYPE_vxQueryScalar * vxQueryScalar;
    TYPE_vxReadScalarValue * vxReadScalarValue;
    TYPE_vxWriteScalarValue * vxWriteScalarValue;
    TYPE_vxCopyScalar * vxCopyScalar;
    TYPE_vxQueryReference * vxQueryReference;
    TYPE_vxReleaseReference * vxReleaseReference;
    TYPE_vxRetainReference * vxRetainReference;
    TYPE_vxSetReferenceName * vxSetReferenceName;
    TYPE_vxQueryDelay * vxQueryDelay;
    TYPE_vxReleaseDelay * vxReleaseDelay;
    TYPE_vxCreateDelay * vxCreateDelay;
    TYPE_vxGetReferenceFromDelay * vxGetReferenceFromDelay;
    TYPE_vxAgeDelay * vxAgeDelay;
    TYPE_vxRegisterAutoAging * vxRegisterAutoAging;
    TYPE_vxAddLogEntry * vxAddLogEntry;
    TYPE_vxRegisterLogCallback * vxRegisterLogCallback;
    TYPE_vxCreateLUT * vxCreateLUT;
    TYPE_vxReleaseLUT * vxReleaseLUT;
    TYPE_vxQueryLUT * vxQueryLUT;
    TYPE_vxAccessLUT * vxAccessLUT;
    TYPE_vxCommitLUT * vxCommitLUT;
    TYPE_vxCopyLUT * vxCopyLUT;
    TYPE_vxMapLUT * vxMapLUT;
    TYPE_vxUnmapLUT * vxUnmapLUT;
    TYPE_vxCreateDistribution * vxCreateDistribution;
    TYPE_vxReleaseDistribution * vxReleaseDistribution;
    TYPE_vxQueryDistribution * vxQueryDistribution;
    TYPE_vxAccessDistribution * vxAccessDistribution;
    TYPE_vxCommitDistribution * vxCommitDistribution;
    TYPE_vxCopyDistribution * vxCopyDistribution;
    TYPE_vxMapDistribution * vxMapDistribution;
    TYPE_vxUnmapDistribution * vxUnmapDistribution;
    TYPE_vxCreateThreshold * vxCreateThreshold;
    TYPE_vxReleaseThreshold * vxReleaseThreshold;
    TYPE_vxSetThresholdAttribute * vxSetThresholdAttribute;
    TYPE_vxQueryThreshold * vxQueryThreshold;
    TYPE_vxCreateMatrix * vxCreateMatrix;
    TYPE_vxReleaseMatrix * vxReleaseMatrix;
    TYPE_vxQueryMatrix * vxQueryMatrix;
    TYPE_vxReadMatrix * vxReadMatrix;
    TYPE_vxWriteMatrix * vxWriteMatrix;
    TYPE_vxCopyMatrix * vxCopyMatrix;
    TYPE_vxCreateMatrixFromPattern * vxCreateMatrixFromPattern;
    TYPE_vxCreateConvolution * vxCreateConvolution;
    TYPE_vxReleaseConvolution * vxReleaseConvolution;
    TYPE_vxQueryConvolution * vxQueryConvolution;
    TYPE_vxSetConvolutionAttribute * vxSetConvolutionAttribute;
    TYPE_vxReadConvolutionCoefficients * vxReadConvolutionCoefficients;
    TYPE_vxWriteConvolutionCoefficients * vxWriteConvolutionCoefficients;
    TYPE_vxCopyConvolutionCoefficients * vxCopyConvolutionCoefficients;
    TYPE_vxCreatePyramid * vxCreatePyramid;
    TYPE_vxCreateVirtualPyramid * vxCreateVirtualPyramid;
    TYPE_vxReleasePyramid * vxReleasePyramid;
    TYPE_vxQueryPyramid * vxQueryPyramid;
    TYPE_vxGetPyramidLevel * vxGetPyramidLevel;
    TYPE_vxCreateRemap * vxCreateRemap;
    TYPE_vxReleaseRemap * vxReleaseRemap;
    TYPE_vxSetRemapPoint * vxSetRemapPoint;
    TYPE_vxGetRemapPoint * vxGetRemapPoint;
    TYPE_vxQueryRemap * vxQueryRemap;
    TYPE_vxCreateArray * vxCreateArray;
    TYPE_vxCreateVirtualArray * vxCreateVirtualArray;
    TYPE_vxReleaseArray * vxReleaseArray;
    TYPE_vxQueryArray * vxQueryArray;
    TYPE_vxAddArrayItems * vxAddArrayItems;
    TYPE_vxTruncateArray * vxTruncateArray;
    TYPE_vxAccessArrayRange * vxAccessArrayRange;
    TYPE_vxCommitArrayRange * vxCommitArrayRange;
    TYPE_vxCopyArrayRange * vxCopyArrayRange;
    TYPE_vxMapArrayRange * vxMapArrayRange;
    TYPE_vxUnmapArrayRange * vxUnmapArrayRange;
    TYPE_vxCreateObjectArray * vxCreateObjectArray;
    TYPE_vxCreateVirtualObjectArray * vxCreateVirtualObjectArray;
    TYPE_vxGetObjectArrayItem * vxGetObjectArrayItem;
    TYPE_vxReleaseObjectArray * vxReleaseObjectArray;
    TYPE_vxQueryObjectArray * vxQueryObjectArray;
    TYPE_vxSetMetaFormatAttribute * vxSetMetaFormatAttribute;
    TYPE_vxSetMetaFormatFromReference * vxSetMetaFormatFromReference;
    TYPE_vxColorConvertNode * vxColorConvertNode;
    TYPE_vxChannelExtractNode * vxChannelExtractNode;
    TYPE_vxChannelCombineNode * vxChannelCombineNode;
    TYPE_vxPhaseNode * vxPhaseNode;
    TYPE_vxSobel3x3Node * vxSobel3x3Node;
    TYPE_vxMagnitudeNode * vxMagnitudeNode;
    TYPE_vxScaleImageNode * vxScaleImageNode;
    TYPE_vxTableLookupNode * vxTableLookupNode;
    TYPE_vxHistogramNode * vxHistogramNode;
    TYPE_vxEqualizeHistNode * vxEqualizeHistNode;
    TYPE_vxAbsDiffNode * vxAbsDiffNode;
    TYPE_vxMeanStdDevNode * vxMeanStdDevNode;
    TYPE_vxThresholdNode * vxThresholdNode;
    TYPE_vxIntegralImageNode * vxIntegralImageNode;
    TYPE_vxErode3x3Node * vxErode3x3Node;
    TYPE_vxDilate3x3Node * vxDilate3x3Node;
    TYPE_vxMedian3x3Node * vxMedian3x3Node;
    TYPE_vxBox3x3Node * vxBox3x3Node;
    TYPE_vxGaussian3x3Node * vxGaussian3x3Node;
    TYPE_vxNonLinearFilterNode * vxNonLinearFilterNode;
    TYPE_vxConvolveNode * vxConvolveNode;
    TYPE_vxGaussianPyramidNode * vxGaussianPyramidNode;
    TYPE_vxLaplacianPyramidNode * vxLaplacianPyramidNode;
    TYPE_vxLaplacianReconstructNode * vxLaplacianReconstructNode;
    TYPE_vxAccumulateImageNode * vxAccumulateImageNode;
    TYPE_vxAccumulateWeightedImageNode * vxAccumulateWeightedImageNode;
    TYPE_vxAccumulateSquareImageNode * vxAccumulateSquareImageNode;
    TYPE_vxMinMaxLocNode * vxMinMaxLocNode;
    TYPE_vxAndNode * vxAndNode;
    TYPE_vxOrNode * vxOrNode;
    TYPE_vxXorNode * vxXorNode;
    TYPE_vxNotNode * vxNotNode;
    TYPE_vxMultiplyNode * vxMultiplyNode;
    TYPE_vxAddNode * vxAddNode;
    TYPE_vxSubtractNode * vxSubtractNode;
    TYPE_vxConvertDepthNode * vxConvertDepthNode;
    TYPE_vxCannyEdgeDetectorNode * vxCannyEdgeDetectorNode;
    TYPE_vxWarpAffineNode * vxWarpAffineNode;
    TYPE_vxWarpPerspectiveNode * vxWarpPerspectiveNode;
    TYPE_vxHarrisCornersNode * vxHarrisCornersNode;
    TYPE_vxFastCornersNode * vxFastCornersNode;
    TYPE_vxOpticalFlowPyrLKNode * vxOpticalFlowPyrLKNode;
    TYPE_vxRemapNode * vxRemapNode;
    TYPE_vxHalfScaleGaussianNode * vxHalfScaleGaussianNode;
    TYPE_vxuColorConvert * vxuColorConvert;
    TYPE_vxuChannelExtract * vxuChannelExtract;
    TYPE_vxuChannelCombine * vxuChannelCombine;
    TYPE_vxuSobel3x3 * vxuSobel3x3;
    TYPE_vxuMagnitude * vxuMagnitude;
    TYPE_vxuPhase * vxuPhase;
    TYPE_vxuScaleImage * vxuScaleImage;
    TYPE_vxuTableLookup * vxuTableLookup;
    TYPE_vxuHistogram * vxuHistogram;
    TYPE_vxuEqualizeHist * vxuEqualizeHist;
    TYPE_vxuAbsDiff * vxuAbsDiff;
    TYPE_vxuMeanStdDev * vxuMeanStdDev;
    TYPE_vxuThreshold * vxuThreshold;
    TYPE_vxuIntegralImage * vxuIntegralImage;
    TYPE_vxuErode3x3 * vxuErode3x3;
    TYPE_vxuDilate3x3 * vxuDilate3x3;
    TYPE_vxuMedian3x3 * vxuMedian3x3;
    TYPE_vxuBox3x3 * vxuBox3x3;
    TYPE_vxuGaussian3x3 * vxuGaussian3x3;
    TYPE_vxuNonLinearFilter * vxuNonLinearFilter;
    TYPE_vxuConvolve * vxuConvolve;
    TYPE_vxuGaussianPyramid * vxuGaussianPyramid;
    TYPE_vxuLaplacianPyramid * vxuLaplacianPyramid;
    TYPE_vxuLaplacianReconstruct * vxuLaplacianReconstruct;
    TYPE_vxuAccumulateImage * vxuAccumulateImage;
    TYPE_vxuAccumulateWeightedImage * vxuAccumulateWeightedImage;
    TYPE_vxuAccumulateSquareImage * vxuAccumulateSquareImage;
    TYPE_vxuMinMaxLoc * vxuMinMaxLoc;
    TYPE_vxuConvertDepth * vxuConvertDepth;
    TYPE_vxuCannyEdgeDetector * vxuCannyEdgeDetector;
    TYPE_vxuHalfScaleGaussian * vxuHalfScaleGaussian;
    TYPE_vxuAnd * vxuAnd;
    TYPE_vxuOr * vxuOr;
    TYPE_vxuXor * vxuXor;
    TYPE_vxuNot * vxuNot;
    TYPE_vxuMultiply * vxuMultiply;
    TYPE_vxuAdd * vxuAdd;
    TYPE_vxuSubtract * vxuSubtract;
    TYPE_vxuWarpAffine * vxuWarpAffine;
    TYPE_vxuWarpPerspective * vxuWarpPerspective;
    TYPE_vxuHarrisCorners * vxuHarrisCorners;
    TYPE_vxuFastCorners * vxuFastCorners;
    TYPE_vxuOpticalFlowPyrLK * vxuOpticalFlowPyrLK;
    TYPE_vxuRemap * vxuRemap;
    TYPE_vxAddKernel * vxAddKernel;
};

#endif
